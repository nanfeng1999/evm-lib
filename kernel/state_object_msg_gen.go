package kernel

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *StateObjectJson) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "abi":
			z.ABI, err = dc.ReadBytes(z.ABI)
			if err != nil {
				err = msgp.WrapError(err, "ABI")
				return
			}
		case "address":
			z.Address, err = dc.ReadBytes(z.Address)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "addrhash":
			z.AddrHash, err = dc.ReadBytes(z.AddrHash)
			if err != nil {
				err = msgp.WrapError(err, "AddrHash")
				return
			}
		case "data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "code":
			z.Code, err = dc.ReadBytes(z.Code)
			if err != nil {
				err = msgp.WrapError(err, "Code")
				return
			}
		case "origin":
			z.Origin, err = dc.ReadBytes(z.Origin)
			if err != nil {
				err = msgp.WrapError(err, "Origin")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *StateObjectJson) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "abi"
	err = en.Append(0x86, 0xa3, 0x61, 0x62, 0x69)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ABI)
	if err != nil {
		err = msgp.WrapError(err, "ABI")
		return
	}
	// write "address"
	err = en.Append(0xa7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// write "addrhash"
	err = en.Append(0xa8, 0x61, 0x64, 0x64, 0x72, 0x68, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.AddrHash)
	if err != nil {
		err = msgp.WrapError(err, "AddrHash")
		return
	}
	// write "data"
	err = en.Append(0xa4, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	// write "code"
	err = en.Append(0xa4, 0x63, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Code)
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	// write "origin"
	err = en.Append(0xa6, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Origin)
	if err != nil {
		err = msgp.WrapError(err, "Origin")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StateObjectJson) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "abi"
	o = append(o, 0x86, 0xa3, 0x61, 0x62, 0x69)
	o = msgp.AppendBytes(o, z.ABI)
	// string "address"
	o = append(o, 0xa7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendBytes(o, z.Address)
	// string "addrhash"
	o = append(o, 0xa8, 0x61, 0x64, 0x64, 0x72, 0x68, 0x61, 0x73, 0x68)
	o = msgp.AppendBytes(o, z.AddrHash)
	// string "data"
	o = append(o, 0xa4, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	// string "code"
	o = append(o, 0xa4, 0x63, 0x6f, 0x64, 0x65)
	o = msgp.AppendBytes(o, z.Code)
	// string "origin"
	o = append(o, 0xa6, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e)
	o = msgp.AppendBytes(o, z.Origin)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StateObjectJson) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "abi":
			z.ABI, bts, err = msgp.ReadBytesBytes(bts, z.ABI)
			if err != nil {
				err = msgp.WrapError(err, "ABI")
				return
			}
		case "address":
			z.Address, bts, err = msgp.ReadBytesBytes(bts, z.Address)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "addrhash":
			z.AddrHash, bts, err = msgp.ReadBytesBytes(bts, z.AddrHash)
			if err != nil {
				err = msgp.WrapError(err, "AddrHash")
				return
			}
		case "data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "code":
			z.Code, bts, err = msgp.ReadBytesBytes(bts, z.Code)
			if err != nil {
				err = msgp.WrapError(err, "Code")
				return
			}
		case "origin":
			z.Origin, bts, err = msgp.ReadBytesBytes(bts, z.Origin)
			if err != nil {
				err = msgp.WrapError(err, "Origin")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StateObjectJson) Msgsize() (s int) {
	s = 1 + 4 + msgp.BytesPrefixSize + len(z.ABI) + 8 + msgp.BytesPrefixSize + len(z.Address) + 9 + msgp.BytesPrefixSize + len(z.AddrHash) + 5 + msgp.BytesPrefixSize + len(z.Data) + 5 + msgp.BytesPrefixSize + len(z.Code) + 7 + msgp.BytesPrefixSize + len(z.Origin)
	return
}
